function int[] quicksort(int[] array, int length) {
  var int[] retval;

  if (length <= 1) {
    retval = array;
  } else {
    var int pivot;
    pivot = array[length - 1];
    var int num_of_less_than_pivot;
    num_of_less_than_pivot = 0;
    var int j;
    j = 0;
    for (j < length; j = j + 1) {
      if (array[j] < pivot) {
        num_of_less_than_pivot = num_of_less_than_pivot + 1;
      }
    }

    var int[] less;
    less = mallocint(num_of_less_than_pivot);
    var int less_length;    
    less_length = 0;

    var int[] greater_or_equal;
    greater_or_equal = mallocint(length - 1 - num_of_less_than_pivot);
    var int greater_or_equal_length;    
    greater_or_equal_length = 0;

    j = 0;
    for (j < length - 1; j = j + 1) {
      if (array[j] < pivot) {
        less[less_length] = array[j];
        less_length = less_length + 1;
      } else {
        greater_or_equal[greater_or_equal_length] = array[j];
        greater_or_equal_length = greater_or_equal_length + 1; 
      }
    }
  
    var int[] sorted_less;
    sorted_less = quicksort(less, less_length);
    
    var int[] sorted_greater_or_equal;
    sorted_greater_or_equal = quicksort(greater_or_equal, greater_or_equal_length);

    var int[] new_array;
    new_array = mallocint(length);
    j = 0;
    for (j < less_length; j = j + 1) {
      new_array[j] = sorted_less[j];
    }
    new_array[less_length] = pivot;
    j = 0;
    for (j < greater_or_equal_length; j = j + 1) {
      new_array[j + less_length + 1] = sorted_greater_or_equal[j];
    }

    retval = new_array;
  }

  return retval;
}

function int main() {
  var int n;
  n = readint();
  var int[] a;
  a = mallocint(n);
  var int i;  
  for (i < n; i = i + 1) {
    a[i] = readint();
  }

  var int[] sorted;
  sorted = quicksort(a, n);

  i = 0;
  for (i < n; i = i + 1) {
    writeintnl(sorted[i]);
  }
  return 0;
}
